AWSTemplateFormatVersion: "2010-09-09"
Description: Service Catalog and StackSet Integration for Route 53 Hosted Zone and NS Records
Parameters:
  HostedZoneName:
    Type: String
    Description: "The name of the hosted zone"
    Default: "mydomain.example.com"

Resources:
  Route53HostedZoneProduct:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref HostedZoneName

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DestinationRoute53UpdateRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - route53:GetHostedZone
                  - route53:ChangeResourceRecordSets
                Resource: "*"
              - Effect: Allow
                Action: "sts:AssumeRole"
                Resource: "arn:aws:iam::<DESTINATION_ACCOUNT_ID>:role/LambdaRoute53ManagementRole"

  Route53UpdaterLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          from __future__ import annotations
          from typing import TYPE_CHECKING
          import boto3
          import cfnresponse  # type: ignore

          if TYPE_CHECKING:
              from mypy_boto3_sts.client import STSClient
              from mypy_boto3_route53.client import Route53Client


          def lambda_handler(event, context) -> None:
              try:
                  # Setup for accessing Route 53
                  sts_client: STSClient = boto3.client("sts")
                  assumed_role = sts_client.assume_role(
                      RoleArn="arn:aws:iam::<DESTINATION_ACCOUNT_ID>:role/LambdaRoute53ManagementRole",
                      RoleSessionName="R53UpdateSession",
                  )
                  credentials = assumed_role["Credentials"]
                  r53_client: Route53Client = boto3.client(
                      "route53",
                      aws_access_key_id=credentials["AccessKeyId"],
                      aws_secret_access_key=credentials["SecretAccessKey"],
                      aws_session_token=credentials["SessionToken"],
                  )
                  ns_records = event["ResourceProperties"]["NSRecords"].split(",")
                  domain_name = event["ResourceProperties"]["DomainName"]
                  
                  # Handling deletion of NS records
                  if event["RequestType"] == "Delete":
                      response = r53_client.change_resource_record_sets(
                          HostedZoneId=domain_name,
                          ChangeBatch={
                              "Comment": f"Delete NS records for {domain_name}",
                              "Changes": [
                                  {
                                      "Action": "DELETE",
                                      "ResourceRecordSet": {
                                          "Name": domain_name,
                                          "Type": "NS",
                                          "TTL": 300,
                                          "ResourceRecords": [{"Value": ns} for ns in ns_records],
                                      },
                                  }
                              ],
                          },
                      )
                      cfnresponse.send(
                          event,
                          context,
                          cfnresponse.SUCCESS,
                          {"Message": f"NS records {ns_records} deleted"},
                      )
                      return

                  # Handling creation/updation of NS records
                  response = r53_client.change_resource_record_sets(
                      HostedZoneId=domain_name,
                      ChangeBatch={
                          "Comment": f"Update NS records for {domain_name}",
                          "Changes": [
                              {
                                  "Action": "UPSERT",
                                  "ResourceRecordSet": {
                                      "Name": domain_name,
                                      "Type": "NS",
                                      "TTL": 300,
                                      "ResourceRecords": [{"Value": ns} for ns in ns_records],
                                  },
                              }
                          ],
                      },
                  )
                  cfnresponse.send(
                      event,
                      context,
                      cfnresponse.SUCCESS,
                      {"Message": f"NS records {ns_records} updated"},
                  )
              except Exception as e:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {"Message": str(e)})

      Runtime: python3.12
      Timeout: 120

  InvokeLambda:
    Type: "Custom::LambdaInvoker"
    Properties:
      ServiceToken: !GetAtt Route53UpdaterLambda.Arn
      NSRecords: !GetAtt Route53HostedZoneProduct.NameServers
      DomainName: !Ref HostedZoneName

Outputs:
  HostedZoneID:
    Description: "The ID of the hosted zone"
    Value: !Ref Route53HostedZoneProduct

  NameServers:
    Description: "The NS records for the hosted zone"
    Value: !Join [", ", !GetAtt Route53HostedZoneProduct.NameServers]
